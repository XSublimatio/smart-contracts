/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js';
import { ContractOptions } from 'web3-eth-contract';
import { EventLog } from 'web3-core';
import { EventEmitter } from 'events';
import { Callback, PayableTransactionObject, NonPayableTransactionObject, BlockType, ContractEventLog, BaseContract } from './types';

export interface EventOptions {
    filter?: object;
    fromBlock?: BlockType;
    topics?: string[];
}

export type AirdropSet = ContractEventLog<{
    account: string;
    0: string;
}>;
export type Approval = ContractEventLog<{
    owner: string;
    approved: string;
    tokenId: string;
    0: string;
    1: string;
    2: string;
}>;
export type ApprovalForAll = ContractEventLog<{
    owner: string;
    operator: string;
    approved: boolean;
    0: string;
    1: string;
    2: boolean;
}>;
export type BaseURISet = ContractEventLog<{
    baseURI: string;
    0: string;
}>;
export type DrugDecomposed = ContractEventLog<{
    drug: string;
    molecules: string[];
    0: string;
    1: string[];
}>;
export type OwnershipAccepted = ContractEventLog<{
    previousOwner: string;
    owner: string;
    0: string;
    1: string;
}>;
export type OwnershipProposed = ContractEventLog<{
    owner: string;
    pendingOwner: string;
    0: string;
    1: string;
}>;
export type ProceedsWithdrawn = ContractEventLog<{
    amount: string;
    0: string;
}>;
export type PromotionAccountSet = ContractEventLog<{
    account: string;
    0: string;
}>;
export type PromotionAccountUnset = ContractEventLog<{
    account: string;
    0: string;
}>;
export type Transfer = ContractEventLog<{
    from: string;
    to: string;
    tokenId: string;
    0: string;
    1: string;
    2: string;
}>;

export interface XSublimatio extends BaseContract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions): XSublimatio;
    clone(): XSublimatio;
    methods: {
        COMPACT_STATE_1(): NonPayableTransactionObject<string>;

        COMPACT_STATE_2(): NonPayableTransactionObject<string>;

        COMPACT_STATE_3(): NonPayableTransactionObject<string>;

        LAUNCH_TIMESTAMP(): NonPayableTransactionObject<string>;

        PRICE_PER_TOKEN_MINT(): NonPayableTransactionObject<string>;

        PROCEEDS_DESTINATION(): NonPayableTransactionObject<string>;

        acceptOwnership(): NonPayableTransactionObject<void>;

        approve(to: string, tokenId: number | string | BN): NonPayableTransactionObject<void>;

        availabilities(): NonPayableTransactionObject<{
            moleculesAvailabilities_: string[];
            drugAvailabilities_: string[];
            0: string[];
            1: string[];
        }>;

        balanceOf(owner: string): NonPayableTransactionObject<string>;

        baseURI(): NonPayableTransactionObject<string>;

        brew(
            molecules_: (number | string | BN)[],
            drugType_: number | string | BN,
            destination_: string
        ): NonPayableTransactionObject<string>;

        canClaimFreeWater(account_: string): NonPayableTransactionObject<boolean>;

        claimWater(destination_: string): NonPayableTransactionObject<string>;

        contractURI(): NonPayableTransactionObject<string>;

        decompose(drug_: number | string | BN): NonPayableTransactionObject<void>;

        drugAvailabilities(): NonPayableTransactionObject<string[]>;

        drugsAvailable(): NonPayableTransactionObject<string>;

        getApproved(tokenId: number | string | BN): NonPayableTransactionObject<string>;

        getAvailabilityOfDrug(drugType_: number | string | BN): NonPayableTransactionObject<string>;

        getAvailabilityOfMolecule(moleculeType_: number | string | BN): NonPayableTransactionObject<string>;

        getDrugContainingMolecule(molecule_: number | string | BN): NonPayableTransactionObject<string>;

        getMoleculesWithinDrug(drug_: number | string | BN): NonPayableTransactionObject<string[]>;

        getRecipeOfDrug(drugType_: number | string | BN): NonPayableTransactionObject<string[]>;

        giveMolecules(destinations_: string[], amounts_: (number | string | BN)[]): NonPayableTransactionObject<string[][]>;

        giveWaters(destinations_: string[], amounts_: (number | string | BN)[]): NonPayableTransactionObject<string[][]>;

        isApprovedForAll(owner: string, operator: string): NonPayableTransactionObject<boolean>;

        moleculeAvailabilities(): NonPayableTransactionObject<string[]>;

        moleculesAvailable(): NonPayableTransactionObject<string>;

        name(): NonPayableTransactionObject<string>;

        owner(): NonPayableTransactionObject<string>;

        ownerOf(tokenId: number | string | BN): NonPayableTransactionObject<string>;

        pendingOwner(): NonPayableTransactionObject<string>;

        proposeOwnership(newOwner_: string): NonPayableTransactionObject<void>;

        purchase(
            destination_: string,
            quantity_: number | string | BN,
            minQuantity_: number | string | BN
        ): PayableTransactionObject<string[]>;

        'safeTransferFrom(address,address,uint256)'(
            from: string,
            to: string,
            tokenId: number | string | BN
        ): NonPayableTransactionObject<void>;

        'safeTransferFrom(address,address,uint256,bytes)'(
            from: string,
            to: string,
            tokenId: number | string | BN,
            data: string | number[]
        ): NonPayableTransactionObject<void>;

        setApprovalForAll(operator: string, approved: boolean): NonPayableTransactionObject<void>;

        setBaseURI(baseURI_: string): NonPayableTransactionObject<void>;

        setPromotionAccounts(accounts_: string[]): NonPayableTransactionObject<void>;

        supportsInterface(interfaceId: string | number[]): NonPayableTransactionObject<boolean>;

        symbol(): NonPayableTransactionObject<string>;

        tokenByIndex(index: number | string | BN): NonPayableTransactionObject<string>;

        tokenOfOwnerByIndex(owner: string, index: number | string | BN): NonPayableTransactionObject<string>;

        tokenURI(tokenId_: number | string | BN): NonPayableTransactionObject<string>;

        tokensOfOwner(owner_: string): NonPayableTransactionObject<string[]>;

        totalSupply(): NonPayableTransactionObject<string>;

        transferFrom(from: string, to: string, tokenId: number | string | BN): NonPayableTransactionObject<void>;

        unsetPromotionAccounts(accounts_: string[]): NonPayableTransactionObject<void>;

        withdrawProceeds(): NonPayableTransactionObject<void>;
    };
    events: {
        AirdropSet(cb?: Callback<AirdropSet>): EventEmitter;
        AirdropSet(options?: EventOptions, cb?: Callback<AirdropSet>): EventEmitter;

        Approval(cb?: Callback<Approval>): EventEmitter;
        Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

        ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
        ApprovalForAll(options?: EventOptions, cb?: Callback<ApprovalForAll>): EventEmitter;

        BaseURISet(cb?: Callback<BaseURISet>): EventEmitter;
        BaseURISet(options?: EventOptions, cb?: Callback<BaseURISet>): EventEmitter;

        DrugDecomposed(cb?: Callback<DrugDecomposed>): EventEmitter;
        DrugDecomposed(options?: EventOptions, cb?: Callback<DrugDecomposed>): EventEmitter;

        OwnershipAccepted(cb?: Callback<OwnershipAccepted>): EventEmitter;
        OwnershipAccepted(options?: EventOptions, cb?: Callback<OwnershipAccepted>): EventEmitter;

        OwnershipProposed(cb?: Callback<OwnershipProposed>): EventEmitter;
        OwnershipProposed(options?: EventOptions, cb?: Callback<OwnershipProposed>): EventEmitter;

        ProceedsWithdrawn(cb?: Callback<ProceedsWithdrawn>): EventEmitter;
        ProceedsWithdrawn(options?: EventOptions, cb?: Callback<ProceedsWithdrawn>): EventEmitter;

        PromotionAccountSet(cb?: Callback<PromotionAccountSet>): EventEmitter;
        PromotionAccountSet(options?: EventOptions, cb?: Callback<PromotionAccountSet>): EventEmitter;

        PromotionAccountUnset(cb?: Callback<PromotionAccountUnset>): EventEmitter;
        PromotionAccountUnset(options?: EventOptions, cb?: Callback<PromotionAccountUnset>): EventEmitter;

        Transfer(cb?: Callback<Transfer>): EventEmitter;
        Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

        allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
    };

    once(event: 'AirdropSet', cb: Callback<AirdropSet>): void;
    once(event: 'AirdropSet', options: EventOptions, cb: Callback<AirdropSet>): void;

    once(event: 'Approval', cb: Callback<Approval>): void;
    once(event: 'Approval', options: EventOptions, cb: Callback<Approval>): void;

    once(event: 'ApprovalForAll', cb: Callback<ApprovalForAll>): void;
    once(event: 'ApprovalForAll', options: EventOptions, cb: Callback<ApprovalForAll>): void;

    once(event: 'BaseURISet', cb: Callback<BaseURISet>): void;
    once(event: 'BaseURISet', options: EventOptions, cb: Callback<BaseURISet>): void;

    once(event: 'DrugDecomposed', cb: Callback<DrugDecomposed>): void;
    once(event: 'DrugDecomposed', options: EventOptions, cb: Callback<DrugDecomposed>): void;

    once(event: 'OwnershipAccepted', cb: Callback<OwnershipAccepted>): void;
    once(event: 'OwnershipAccepted', options: EventOptions, cb: Callback<OwnershipAccepted>): void;

    once(event: 'OwnershipProposed', cb: Callback<OwnershipProposed>): void;
    once(event: 'OwnershipProposed', options: EventOptions, cb: Callback<OwnershipProposed>): void;

    once(event: 'ProceedsWithdrawn', cb: Callback<ProceedsWithdrawn>): void;
    once(event: 'ProceedsWithdrawn', options: EventOptions, cb: Callback<ProceedsWithdrawn>): void;

    once(event: 'PromotionAccountSet', cb: Callback<PromotionAccountSet>): void;
    once(event: 'PromotionAccountSet', options: EventOptions, cb: Callback<PromotionAccountSet>): void;

    once(event: 'PromotionAccountUnset', cb: Callback<PromotionAccountUnset>): void;
    once(event: 'PromotionAccountUnset', options: EventOptions, cb: Callback<PromotionAccountUnset>): void;

    once(event: 'Transfer', cb: Callback<Transfer>): void;
    once(event: 'Transfer', options: EventOptions, cb: Callback<Transfer>): void;
}
