/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Splitter, SplitterInterface } from "../Splitter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[3]",
        name: "accounts_",
        type: "address[3]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "accounts",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "banked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "changeAccount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "splitETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    name: "splitToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600160005534801561001557600080fd5b5060405161083a38038061083a8339810160408190526100349161009c565b8051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117905560409092015160038054909316911617905561012e565b80516001600160a01b038116811461009757600080fd5b919050565b6000606082840312156100ae57600080fd5b82601f8301126100bd57600080fd5b604051606081016001600160401b03811182821017156100ed57634e487b7160e01b600052604160045260246000fd5b60405280606084018581111561010257600080fd5b845b818110156101235761011581610080565b835260209283019201610104565b509195945050505050565b6106fd8061013d6000396000f3fe60806040526004361061004e5760003560e01c8063249bc14b1461005a578063428566ea1461007c578063a9b57b441461009c578063d1aa25d0146100cf578063f2a40db8146100e457600080fd5b3661005557005b600080fd5b34801561006657600080fd5b5061007a6100753660046105bf565b61011c565b005b34801561008857600080fd5b5061007a6100973660046105e1565b6103c8565b3480156100a857600080fd5b506100bc6100b736600461060d565b61045a565b6040519081526020015b60405180910390f35b3480156100db57600080fd5b5061007a61047f565b3480156100f057600080fd5b506101046100ff366004610637565b610527565b6040516001600160a01b0390911681526020016100c6565b6001600054146101605760405162461bcd60e51b815260206004820152600a6024820152692727afa922a2a72a22a960b11b60448201526064015b60405180910390fd5b600260009081556040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf9190610650565b90506001600160a01b03821663a9059cbb6001600001546001600160a01b031660646101fc85604661067f565b61020691906106ac565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610251573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027591906106ce565b506001600160a01b03821663a9059cbb60018001546001600160a01b031660646102a085600f61067f565b6102aa91906106ac565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031991906106ce565b506001600160a01b03821663a9059cbb6001600201546001600160a01b0316606461034585600f61067f565b61034f91906106ac565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561039a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103be91906106ce565b5050600160005550565b33600183600381106103dc576103dc610669565b01546001600160a01b0316146104235760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610157565b806001836003811061043757610437610669565b0180546001600160a01b0319166001600160a01b03929092169190911790555050565b6004602052816000526040600020816003811061047657600080fd5b01549150829050565b6001600054146104be5760405162461bcd60e51b815260206004820152600a6024820152692727afa922a2a72a22a960b11b6044820152606401610157565b600260005560015447906104f1906001600160a01b031660646104e284604661067f565b6104ec91906106ac565b610547565b506105116001805b01546001600160a01b031660646104e284600f61067f565b5061051e600160026104f9565b50506001600055565b6001816003811061053757600080fd5b01546001600160a01b0316905081565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610594576040519150601f19603f3d011682016040523d82523d6000602084013e610599565b606091505b5090949350505050565b80356001600160a01b03811681146105ba57600080fd5b919050565b6000602082840312156105d157600080fd5b6105da826105a3565b9392505050565b600080604083850312156105f457600080fd5b82359150610604602084016105a3565b90509250929050565b6000806040838503121561062057600080fd5b610629836105a3565b946020939093013593505050565b60006020828403121561064957600080fd5b5035919050565b60006020828403121561066257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008160001904831182151516156106a757634e487b7160e01b600052601160045260246000fd5b500290565b6000826106c957634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156106e057600080fd5b815180151581146105da57600080fdfea164736f6c634300080f000a";

type SplitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Splitter__factory extends ContractFactory {
  constructor(...args: SplitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Splitter";
  }

  deploy(
    accounts_: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Splitter> {
    return super.deploy(accounts_, overrides || {}) as Promise<Splitter>;
  }
  getDeployTransaction(
    accounts_: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(accounts_, overrides || {});
  }
  attach(address: string): Splitter {
    return super.attach(address) as Splitter;
  }
  connect(signer: Signer): Splitter__factory {
    return super.connect(signer) as Splitter__factory;
  }
  static readonly contractName: "Splitter";
  public readonly contractName: "Splitter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitterInterface {
    return new utils.Interface(_abi) as SplitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Splitter {
    return new Contract(address, _abi, signerOrProvider) as Splitter;
  }
}
